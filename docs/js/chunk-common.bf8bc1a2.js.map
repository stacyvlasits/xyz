{"version":3,"sources":["webpack:///./js/bounds/BoundsForm.vue?2d85","webpack:///./js/bounds/BoundsForm.vue","webpack:///./js/bounds/BoundsForm.vue?1ffb","webpack:///./js/coords/CoordsForm.vue","webpack:///./js/coords/CoordsForm.vue?e418","webpack:///./js/coords/CoordsForm.vue?9233","webpack:///./js/permalink.js","webpack:///./js/coords/coords.js"],"names":["class","coordinate","min","onMin","max","onMax","props","Object","components","CoordsForm","bounds","lat","lon","methods","ev","this","$emit","emits","render","__scopeId","style","name","onSelect","$event","target","value","types","LV95","WGS84_DMS","WGS84_DEG","dms","deg","type","step","size","sec","show","lv95","N","E","parseFloatOrZero","str","val","parseFloat","Number","isFinite","getOrClear","obj","field","system","originalCoordinate","WGS84","Error","coord","watch","changeEvent","$root","deep","hash","location","min_lat","min_lon","max_lat","max_lon","link","π","Math","PI","τ","sqrt","sin","exp","log","cos","DEGREE","tan","asin","atan","MINUTE","SECOND","System","freeze","dms2deg","deg2rad","deg2dms","degIn","floor","minIn","wgs2lv95","latt","lngg","latArc","lngArc","lng","lat2","lat3","lng2","lng3","toFixed","lv952wgs","Ep","Np","xp","yp","xp2","xp3","yp2","yp3","λp","φp","λ","φ","Ellipsoid","semiMajor","semiMinor","φ0","λ0","flatteningInverse","E2","R","radiusOfProjectionSphere","α","sin2","cos4","θ","s","BesselEllipsoid","super"],"mappings":"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","file":"js/chunk-common.bf8bc1a2.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./BoundsForm.vue?vue&type=style&index=0&id=3e2e3ba0&scoped=true&lang=css\"","<template>\n  <div class=\"bounds-forms\">\n    <h3>Min Coordindate</h3>\n    <coords-form :coordinate=\"min\" @coord-changed=\"onMin\"></coords-form>\n    <h3>Max Coordindate</h3>\n    <coords-form :coordinate=\"max\" @coord-changed=\"onMax\"></coords-form>\n  </div>\n</template>\n<script>\nimport CoordsForm from '../coords/CoordsForm.vue';\nimport {wgs2lv95} from '../coords/coords.js';\nimport {assertInRange} from '@pablo-mayrgundter/testing.js/testing.js';\n\n\nexport default {\n  props: {\n    min: Object,\n    max: Object\n  },\n  components: {\n    'coords-form': CoordsForm\n  },\n  data() {\n    return {\n      bounds: {\n        min: {\n          lat: null,\n          lon: null\n        },\n        max: {\n          lat: null,\n          lon: null\n        },\n      }\n    }\n  },/*\n  created() {\n    console.log(`BoundsForm: min.lat: ${this.min.lat}, `\n                + `min.lon: ${this.min.lon}, `\n                + `max.lat: ${this.max.lat}, `\n                + `max.lon: ${this.max.lon}`);\n  },*/\n  methods: {\n    onMin(ev) {\n      assertInRange(ev.lat, -360, 360);\n      assertInRange(ev.lon, -360, 360);\n      if (this.bounds.max.lat == null) {\n        this.bounds.max.lat = this.max.lat;\n        this.bounds.max.lon = this.max.lon;\n      }\n      this.bounds.min.lat = ev.lat;\n      this.bounds.min.lon = ev.lon;\n      //console.log(`bounds/BoundsForm.vue#onMin: `, ev, this.bounds);\n      this.$emit('bounds-changed', this.bounds);\n    },\n    onMax(ev) {\n      assertInRange(ev.lat, -360, 360);\n      assertInRange(ev.lon, -360, 360);\n      if (this.bounds.min.lat == null) {\n        this.bounds.min.lat = this.min.lat;\n        this.bounds.min.lon = this.min.lon;\n      }\n      this.bounds.max.lat = ev.lat;\n      this.bounds.max.lon = ev.lon;\n      //console.log('bounds/BoundsForm.vue#onMax: ', ev, this.bounds);\n      this.$emit('bounds-changed', this.bounds);\n    },\n  },\n  emits: ['bounds-changed'],\n};\n</script>\n<style scoped>\n.bounds-forms input {\n  margin: 5px;\n  padding: 5px;\n}\n\n\n.two-digit {\n  width: 30pt;\n}\n\n\n.five-digit {\n  width: 75pt;\n}\n\n\n.ten-digit {\n  width: 150pt;\n}\n\n\n.bounds-forms span {\n    margin-right: 27px;\n    padding-left: 3px;\n}\n\n\n.coord-form {\n  margin-top: 15px;\n}\n</style>\n","import { render } from \"./BoundsForm.vue?vue&type=template&id=3e2e3ba0&scoped=true\"\nimport script from \"./BoundsForm.vue?vue&type=script&lang=js\"\nexport * from \"./BoundsForm.vue?vue&type=script&lang=js\"\n\nimport \"./BoundsForm.vue?vue&type=style&index=0&id=3e2e3ba0&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-3e2e3ba0\"\n\nexport default script","<template>\n  <div class=\"coords-forms\">\n    <span style=\"width: 50pt\">System:</span>\n    <select name=\"input_format\" v-on:change=\"onSelect($event.target.value)\">\n      <option v-bind:value=\"types.LV95\">LV95</option>\n      <option v-bind:value=\"types.WGS84_DMS\">Deg°/Min'/Sec\"</option>\n      <option v-bind:value=\"types.WGS84_DEG\">Deg°</option>\n    </select>\n    <form name=\"coords_dms\" v-show=\"show == types.WGS84_DMS\" class=\"coord-form\">\n      <table>\n        <tr>\n          <td>Latitude:</td>\n          <td>\n            <input v-model=\"dms.lat.deg\" type=\"number\" step=\"any\" class=\"two-digit\">°\n            <input v-model=\"dms.lat.min\" type=\"number\" step=\"any\" size=\"3\" class=\"two-digit\">'\n            <input v-model=\"dms.lat.sec\" type=\"number\" step=\"0.05\" size=\"5\" class=\"five-digit\">\"\n          </td>\n        </tr>\n        <tr>\n          <td>Longitude:</td>\n          <td>\n            <input v-model=\"dms.lon.deg\" type=\"number\" step=\"any\" class=\"two-digit\">°\n            <input v-model=\"dms.lon.min\" type=\"number\" step=\"any\" class=\"two-digit\">'\n            <input v-model=\"dms.lon.sec\" type=\"number\" step=\"0.05\" class=\"five-digit\">\"\n          </td>\n        </tr>\n      </table>\n    </form>\n    <form name=\"coords_degrees\" v-show=\"show == types.WGS84_DEG\" class=\"coord-form\">\n      <table>\n        <tr>\n          <td>Latitude:</td>\n          <td>\n            <input v-model=\"deg.lat\" type=\"number\" step=\"any\" class=\"ten-digit\">° N\n          </td>\n        </tr>\n        <tr>\n          <td>Longitude:</td>\n          <td>\n            <input v-model=\"deg.lon\" type=\"number\" step=\"any\" class=\"ten-digit\">° E\n          </td>\n        </tr>\n      </table>\n    </form>\n    <form name=\"coords_lv95\" v-show=\"show == types.LV95\" class=\"coord-form\">\n      <table>\n        <tr>\n          <td>Latitude:</td>\n          <td><input v-model=\"lv95.N\" type=\"number\" step=\"any\" class=\"ten-digit\"> meters North</td>\n        </tr>\n        <tr>\n          <td>Longitude:</td>\n          <td><input v-model=\"lv95.E\" type=\"number\" step=\"any\" class=\"ten-digit\"> meters East</td>\n        </tr>\n      </table>\n    </form>\n  </div>\n</template>\n<script>\nimport {dms2deg, wgs2lv95, lv952wgs, deg2dms, System} from './coords.js';\nimport {assertDefined,assertEquals} from '@pablo-mayrgundter/testing.js/testing.js';\n\n\nfunction parseFloatOrZero(str) {\n  const val = parseFloat(str);\n  return Number.isFinite(val) ? val : 0;\n}\n\n\nfunction getOrClear(obj, field) {\n  const str = obj[field];\n  const val = parseFloatOrZero(str);\n  if (val == 0) {\n    obj[field] = '0';\n  } else {\n    return val;\n  }\n}\n\nexport default {\n  props: {\n    coordinate: Object\n  },\n  data() {\n    this.originalCoordinate = this.coordinate;\n\n    let lat, lon, N, E, system, originalCoordinate;\n    if (this.coordinate.system == System.WGS84) {\n      [lat, lon, system] = [this.coordinate.lat, this.coordinate.lon, System.WGS84];\n      [N, E] = wgs2lv95(lat, lon);\n    } else if (this.coordinate.system == System.LV95) {\n      [lat, lon] = lv952wgs(this.coordinate.lat, this.coordinate.lon);\n      system = System.WGS84;\n      [N, E] = [this.coordinate.lat, this.coordinate.lon];\n      this.originalCoordinate = this.coordinate;\n      this.originalCoordinate.system = System.LV95;\n    } else {\n      assertEquals(System.WGS84, this.coordinate.system, 'Unknown coordinate system: ', this.coordinate.system);\n    }\n\n    if (lat > 360 || lon > 360 || lat < -360 || lon < -360) {\n      throw new Error('Coordinate not reified to WGS range [-360,360].');\n    }\n\n    //console.log([N, E]);\n    return {\n      // Main saved coordinate.\n      coord: {\n        lat: lat,\n        lon: lon\n      },\n      // The rest is internal state for component displays.\n      dms: {\n        lat: deg2dms(lat),\n        lon: deg2dms(lon),\n      },\n      deg: {\n        lat: lat,\n        lon: lon,\n      },\n      lv95: {\n        N: N,\n        E: E,\n      },\n      types: {\n        WGS84_DMS: System.WGS84 + '-dms',\n        WGS84_DEG: System.WGS84 + '-deg',\n        LV95: System.LV95\n      },\n      show: System.LV95 //System.WGS84 + '-dms', // can't use this.types\n    }\n  },\n  methods: {\n    getCoord() {\n      if (this.originalCoordinate) {\n        this.coord.originalCoordinate = this.originalCoordinate;\n      }\n      return this.coord;\n    },\n    onSelect(value) {\n      switch(value) {\n      case this.types.WGS84_DMS:\n        [this.dms.lat, this.dms.lon] = [deg2dms(this.coord.lat), deg2dms(this.coord.lon)];\n        break;\n      case this.types.WGS84_DEG:\n        [this.deg.lat, this.deg.lon] = [this.coord.lat, this.coord.lon];\n        break;\n      case this.types.LV95:\n        if (this.originalCoordinate && this.originalCoordinate.system == System.LV95) {\n          [this.lv95.N, this.lv95.E] = [this.originalCoordinate.lat, this.originalCoordinate.lon];\n        } else {\n          [this.lv95.N, this.lv95.E] = wgs2lv95(this.coord.lat, this.coord.lon);\n        }\n        break;\n      default: throw new Error('Invalid system in switch: ' + value);\n      }\n      this.show = value;\n    }\n  },\n  emits: ['coord-changed'],\n  watch: {\n    coord: {\n      handler() {\n        const changeEvent = {\n          lat: this.coord.lat,\n          lon: this.coord.lon,\n          system: System.WGS84,\n          originalCoordinate: this.originalCoordinate\n        };\n        this.$root.$emit('coord-changed', changeEvent);\n        this.$emit('coord-changed', changeEvent);\n      },\n      deep: true\n    },\n    dms: {\n      handler() {\n        const dms = this.dms;\n        this.coord.lat = dms2deg(getOrClear(dms.lat, 'deg'), getOrClear(dms.lat, 'min'), getOrClear(dms.lat, 'sec'));\n        this.coord.lon = dms2deg(getOrClear(dms.lon, 'deg'), getOrClear(dms.lon, 'min'), getOrClear(dms.lon, 'sec'));\n        this.originalCoordinate = null;\n      },\n      deep: true\n    },\n    deg: {\n      handler() {\n        this.coord.lat = dms2deg(getOrClear(this.deg, 'lat'));\n        this.coord.lon = dms2deg(getOrClear(this.deg, 'lon'));\n        this.originalCoordinate = null;\n      },\n      deep: true\n    },\n    lv95: {\n      handler() {\n        [this.coord.lat, this.coord.lon] = lv952wgs(getOrClear(this.lv95, 'N'), getOrClear(this.lv95, 'E'));\n        this.originalCoordinate = {\n          lat: getOrClear(this.lv95, 'N'),\n          lon: getOrClear(this.lv95, 'E'),\n          system: System.LV95\n        };\n      },\n      deep: true\n    },\n  }\n};\n</script>\n<style scoped>\n.coords-forms input {\n  margin: 5px;\n  padding: 5px;\n}\n\n\n.two-digit {\n  width: 30pt;\n}\n\n\n.five-digit {\n  width: 75pt;\n}\n\n\n.ten-digit {\n  width: 150pt;\n}\n\n\n.coords-forms span {\n    margin-right: 27px;\n    padding-left: 3px;\n}\n\n\n.coord-form {\n  margin-top: 15px;\n}\n</style>\n","import { render } from \"./CoordsForm.vue?vue&type=template&id=5d136366&scoped=true\"\nimport script from \"./CoordsForm.vue?vue&type=script&lang=js\"\nexport * from \"./CoordsForm.vue?vue&type=script&lang=js\"\n\nimport \"./CoordsForm.vue?vue&type=style&index=0&id=5d136366&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-5d136366\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./CoordsForm.vue?vue&type=style&index=0&id=5d136366&scoped=true&lang=css\"","import * as queryString from 'query-string';\n\n\nconst hash = queryString.parse(location.hash);\nlet lat = 0, lon = 0, min_lat = 0, min_lon = 0, max_lat = 0, max_lon = 0;\nif (hash) {\n  lat = parseFloat(hash.lat) || 0;\n  lon = parseFloat(hash.lon) || 0;\n  min_lat = parseFloat(hash.min_lat) || lat;\n  max_lat = parseFloat(hash.max_lat) || lat;\n  min_lon = parseFloat(hash.min_lon) || lon;\n  max_lon = parseFloat(hash.max_lon) || lon;\n  //console.log(`permalink.js: lat: ${lat}, lon: ${lon}, min_lat: ${min_lat}, min_lon: ${min_lon}, max_lat: ${max_lat}, max_lon: ${min_lon}`);\n}\n\nconst link = {\n  lat: lat,\n  lon: lon,\n  min_lat: min_lat,\n  max_lat: max_lat,\n  min_lon: min_lon,\n  max_lon: max_lon,\n};\n\nif (location.hash == '') {\n  const stringified = queryString.stringify(link);\n  //console.log('stringified: ', stringified);\n  //location.hash = stringified;\n}\n\nexport default link;\n","// Ported from:\n//\n// Implementation of Formulas and constants for the calculation of the\n// Swiss conformal cylindrical projection and for the transformation\n// between coordinate systems. December 2016.  For download at:\n//\n// https://www.swisstopo.admin.ch/content/swisstopo-internet/en/topics/survey/reference-systems/switzerland/_jcr_content/contentPar/tabs/items/dokumente_publikatio/tabPar/downloadlist/downloadItems/517_1459343190376.download/refsys_e.pdf\n\nconst π = Math.PI, τ = 2 * π;\nconst sqrt = Math.sqrt, exp = Math.exp, ln = Math.log,\n  sin = Math.sin, cos = Math.cos, tan = Math.tan,\n  asin = Math.asin, atan = Math.atan;\n\n\nconst DEGREE = 1 / 360;\nconst MINUTE = 1 / 360 / 60;\nconst SECOND = 1 / 360 / 3600;\n\nexport const System = Object.freeze({\n  WGS84: 'wgs84-system',\n  LV95: 'lv95-system'\n});\n\n\nexport function dms2deg(deg, min = 0, sec = 0) {\n  return deg + min / 60 + sec / 3600;\n}\n\n\nexport function deg2rad(deg, min = 0, sec = 0) {\n  return τ * (deg * DEGREE + min * MINUTE + sec * SECOND);\n}\n\n\nexport function deg2sec(deg, min = 0, sec = 0) {\n  return 3600 * deg + 60 * min + sec;\n}\n\n\nexport function deg2dms(degIn) {\n  const deg = Math.floor(degIn);\n  const minIn = ((degIn % 1) * 60);\n  const min = Math.floor(minIn);\n  const sec = ((minIn % 1) * 60);\n  return {deg: deg, min: min, sec: sec};\n}\n\n\n/**\n * 4.1 Approximate formulas for the transformation between Swiss\n * projection coordinates and WGS84.\n * @return [N, E]\n */\nexport function wgs2lv95(latt, lngg) {\n  const latArc = latt * 3600;\n  const lngArc = lngg * 3600;\n  const lat = (latArc - 169028.66) / 10000; // φ'\n  const lng = (lngArc - 26782.5) / 10000; // λ'\n\n  const lat2 = lat * lat, lat3 = lat2 * lat;\n  const lng2 = lng * lng, lng3 = lng2 * lng;\n\n  const E = 2600072.37\n    + 211455.93 * lng\n    - 10938.51 * lng * lat\n    - 0.36 * lng * lat2\n    - 44.54 * lng3;\n\n  const N = 1200147.07\n    + 308807.95 * lat\n    + 3745.25 * lng2\n    + 76.63 * lat2\n    - 194.56 * lng2 * lat\n    + 119.79 * lat3;\n\n  // TODO: why the fixup for roundtrip?\n  return [parseFloat(N.toFixed(2)) - 0.02, parseFloat(E.toFixed(2)) + 0.02];\n}\n\n\n/**\n * 4.2 Approximate formulas for the direct transformation of Swiss\n * projection coordinates to ellipsoidal WGS84 coordinates.\n * @return [lat, lng]\n */\nexport function lv952wgs(N, E) {\n  const Ep = (E - 2600000) / 1000000;\n  const Np = (N - 1200000) / 1000000;\n  const xp = Np, yp = Ep,\n    xp2 = xp * xp, xp3 = xp2 * xp,\n    yp2 = yp * yp, yp3 = yp2 * yp;\n  const λp = 2.6779094\n    + 4.728982 * yp\n    + 0.791484 * yp * xp\n    + 0.1306 * yp * xp2\n    - 0.0436 * yp3;\n  const φp = 16.9023892\n    + 3.238272 * xp\n    - 0.270978 * yp2\n    - 0.002528 * xp2\n    - 0.0447 * yp2 * xp\n    - 0.0140 * xp3;\n  const λ = λp * 100 / 36;\n  const φ = φp * 100 / 36;\n  return [φ, λ];\n}\n\n\n// https://www.movable-type.co.uk/scripts/latlong.html\n// MIT License\n// NB: https://www.movable-type.co.uk/scripts/latlong-vincenty.html\nexport function distanceHaversine(lat1, lon1, lat2, lon2) {\n  // TODO: replace with computed value from reference ellipsoid.\n  const R = 6371e3; // metres\n  const toRad = π / 180;\n  const φ1 = lat1 * toRad; // φ, λ in radians\n  const φ2 = lat2 * toRad;\n  const Δφ = (lat2 - lat1) * toRad;\n  const Δλ = (lon2 - lon1) * toRad;\n  const a = sin(Δφ / 2) * sin(Δφ / 2) +\n    cos(φ1) * cos(φ2) *\n    sin(Δλ / 2) * sin(Δλ / 2);\n  const c = 2 * Math.atan2(sqrt(a), sqrt(1 - a));\n  const d = R * c; // in metres\n  return d;\n}\n\n\nexport class Ellipsoid {\n  /**\n   * @param φ0 ellipsoidal latitude of the projection centre\n   * @param λ0 ellipsoidal longitude of the projection centre\n   */\n  constructor(semiMajor, semiMinor, φ0, λ0) {\n    this.semiMajor = semiMajor;\n    this.semiMinor = semiMinor;\n    this.flatteningInverse = this.semiMajor / (this.semiMajor - this.semiMinor);\n    const a2 = this.semiMajor * this.semiMajor;\n    const b2 = this.semiMinor * this.semiMinor;\n    // 1st numerical eccentricity (squared) of the Bessel ellipsoid (*).\n    //this.E2 = (a2 - b2) / a2;\n    this.E2 = 0.006674372230614;\n    // Only E is directly used in the calculations below.\n    this.E = sqrt(this.E2);\n    this.φ0 = φ0;\n    this.λ0 = λ0;\n    this.R = this.radiusOfProjectionSphere();\n    // Relat. between longitude on sphere and on ellipsoid.\n    //this.α = this.computeα();\n    this.α = 1.00072913843038;\n  }\n\n\n  /**\n   * Helper to compute radius of the projection sphere; meters.\n   * @private\n   */\n  radiusOfProjectionSphere() {\n    return this.semiMajor * sqrt(1 - this.E2) / (1 - this.E2 * this.sin2(this.φ0));\n  }\n\n\n  /**\n   * Helper to compute relationship between longitude on sphere and on\n   * ellipsoid.\n   * @private\n   */\n  computeα() {\n    return sqrt(1 + this.E2 / (1 - this.E2) * this.cos4(this.φ0));\n  }\n\n\n  // @private\n  sin2(θ) {\n    const s = sin(θ);\n    return s * s;\n  }\n\n\n  cos4(θ) {\n    const s = cos(θ);\n    return s * s * s * s;\n  }\n}\n\n\nexport class BesselEllipsoid extends Ellipsoid {\n  /**\n   * Bessel ellipsoid with a projection center.\n   * @param φ0 ellipsoidal latitude of the projection centre\n   * @param λ0 ellipsoidal longitude of the projection centre\n   */\n  constructor(φ0, λ0) {\n    super(6377397.155, 6356078.962822, φ0, λ0);\n  }\n}\n\n\nexport const BernBesselEllipsoid =\n    new BesselEllipsoid(deg2rad(46, 57, 8.66), deg2rad(7, 26, 22.50));\n\n\n// Latitude of the fundamental point on the sphere.\nconst b0 = deg2rad(46, 54, 27.83324844);\n\n// Constant of the latitude formula.\nconst K = 0.0030667323772751;\n\n\n/**\n * See: 3.2 Ellipsoidal coordinates (λ, φ on the Bessel ellipsoid) ⇒\n * Swiss projection coordinates (rigorous formulas)\n */\nexport function ellipsoidToLV95(φ, λ, eoid = BernBesselEllipsoid) {\n  // a) Bessel ellipsoid (φ, λ) ⇒ sphere (b, l) (Gauss projection)\n  const α = eoid.α, E = eoid.E, R = eoid.R;\n  const S = α * ln(tan(π/4 + φ/2)) - α * E / 2\n    * ln((1 + E * sin(φ)) / (1 - E * sin(φ))) + K;\n  const b = 2 * (atan(exp(S)) - π/4);\n  const l = α * (λ - eoid.λ0);\n  // b) equator system (b, l) ⇒ pseudo-equator system ( b ) (rotation)\n  const ll = atan(sin(l) / (sin(b0) * tan(b) + cos(b0)  * cos(l)));\n  const bb = asin(cos(b0) * sin(b) - sin(b0) * cos(b) * cos(l));\n  // c) sphere (b), l ⇒ projection plane (y, x) (Mercator projection)\n  const yy = R * ll;\n  const xx = R / 2 * ln((1 + sin(bb)) / (1 - sin(bb)));\n  const yyy = yy + 2600000;\n  const xxx = xx + 1200000;\n  return [yyy, xxx];\n}\n\n\n/**\n * See: 3.3 Swiss projection coordinates (y, x) ⇒ ellipsoidal coordinates\n * (λ, φ) (rigorous formulas)\n */\nexport function LV95ToEllipsoid(East, North, eoid = BernBesselEllipsoid) {\n  // a) projection plane (y, x) ⇒  sphere (b)\n  const α = eoid.α, E = eoid.E, R = eoid.R, λ0 = eoid.λ0;\n  const Y = East - 2600000;\n  const X = North - 1200000;\n  const ll = Y / R;\n  const bb = 2 * (atan(exp(X / R)) - π/4);\n  // b) pseudo-equator system (b), l ⇒ equator system (b, l)\n  const b = asin(cos(b0) * sin(bb) + sin(b0) * cos(bb) * cos(ll));\n  const l = atan(sin(ll) / (cos(b0) * cos(ll) - sin(b0) * tan(bb)));\n  // c) sphere (b, l) ⇒ Bessel ellipsoid (φ, λ)\n  const λ = λ0 + l / α;\n  let φ = b;\n  let S = 0;\n  const threshold = 0.000000000001; // TODO: this is just an arb small num.\n  for (let i = 0; i < 10; i++) {\n    const newS =  1/α * ln(tan(π/4 + b/2) - K) + E\n      * ln(tan(π/4 + asin(E * asin(φ)) / 2));\n    const newφ = 2 * atan(exp(S)) - π/2;\n    if (newS - S < threshold && newφ - φ < threshold) {\n      break;\n    }\n    S = newS;\n    φ = newφ;\n  }\n  return [λ, φ];\n}\n"],"sourceRoot":""}